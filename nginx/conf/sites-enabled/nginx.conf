#使用方法ln -s /root/server/nginx/nginx.conf /root/nginx/conf/nginx.conf
####
user  root;
#user  nobody;
#cpu的优化
worker_processes  1;
#woker进程优先级,越小时时间片切换越长（调高减少切换时间）,值是-20到19，
worker_priority 19;
#自动绑定cpu跟进程的关系，绑定的是CPU和进程 （CPU的掩码）
worker_cpu_affinity auto;



#########12
#给线程池
#thread_pool default threads=32 max_queue=65536;
#########12

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

events {
    #设置单个worker连接数（如：2核x10万），一个连接232字节，事件96字节(受文件句柄数限制)
    worker_connections  200000;
    #当前最大连接数(受文件句柄数限制)
    #worker_rlimit_nofile 100000;
}


http {
    include       mime.types;
    default_type  application/octet-stream;
    #default_type text/html;
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    #tcp_nopush     on;
    ############13
    upstream client1 {
        #模拟生产服务器
        server 10.0.0.4:9091;
    }
    upstream client2 {
        #模拟预发布服务器
        server 10.0.0.4:9092;
    }
    #加载lua包
    #lua_package_path "/sftpdir/www/luash/lib/?.lua;;";
    ############13

    #########1、定义规则( $binary_remote_addr客户端IP地址 zone=test名称 10m  rate=1r/s每秒请求数)
    #超出后返回 503
    #limit_req_zone $binary_remote_addr zone=test:10m rate=1r/s;
    #########1、结束
    #keepalive_timeout  0;
    keepalive_timeout  65;

    ##########12
    gzip  on;
    gzip_min_length 1024;
    gzip_comp_level  6;
    gzip_types  text/pian  text/css;
    gzip_http_version 1.1;
    gzip_disable "MSIE [1-6]\.";
    #零拷贝：关闭时 磁盘到应用缓冲区再发送到socket，开启后直接到socket 缓冲区
    sendfile on;
    #当文件特大时可以直接io（异步io） ,小文件可以用0拷贝，异步io时必须开启线程池，当关闭异步io时 aio会失效
    #directio 10m;
    #aio threads=default;
    ##########12

    ##############9动态负载
    ######upstream swoole_server9 {
    ######    #server 10.0.0.1:80;
    ######    #upsync_timeout超时时间，upsync_interval定时获取事件
    ######    upsync 127.0.0.1:8500/v1/kv/upstreams/swoole_test upsync_timeout=6m upsync_interval=500ms upsync_type=consul
    ######    #是否依赖consul的运行
    ######    strong_dependency=on;
    ######    #拉去后生成配置文件
    ######    upsync_dump_path /usr/local/nginx/conf/servers_test.conf;
    ######    include /usr/local/nginx/conf/servers_test.conf;
    ######}
    ##############9

    upstream swoole_server {
        server 10.0.0.4:9091;
    }

    ##############10代理缓存（）
    #设置缓存目录
    #levels=1:2设置多级目录
    #keys_zone=my_cache:20m缓存时间为20秒
    #max_size=1g最大缓存文件大小
    #inactive=10未访问时删除10(S秒M分）
    #use_temp_path关闭时直接写入到缓存文件中
    proxy_cache_path  /usr/local/nginx/cache  levels=1:2  keys_zone=my_cache:20m  max_size=1g inactive=1m  use_temp_path=off;
    ##############10代理缓存



    #gzip  on;

    #4、开始
    #1黑名单，0白名单
    #判断客户端的ip地址是否在白名单列表当中
    geo $whiteIpList {
        default  1;
        10.0.0.1 0;
        127.0.0.0/24 1;
        #文件加载的形式
        #include '/conf/whiteIP.conf'
    }
    #4结束

    #7开始
    #轮询方式 (依次顺序访问) http://10.0.0.4/upstream
    upstream swoole_server0 {
       server 10.0.0.4:9091;
       server 10.0.0.4:9092;
       server 10.0.0.4:80;
    }

    #轮询+权重 (权重高的访问的多一些)
    upstream swoole_server1 {
       server 10.0.0.4:9091;
       server 10.0.0.4:9092 weight=10;
       server 10.0.0.4:80;
    }

    #ip_hash (请求会落在一台机器上)
    upstream swoole_server2 {
       ip_hash;
       #least_conn; #最少连接数
       server 10.0.0.4:9091;
       server 10.0.0.4:9092;
    }

    #使用某个值做hash (请求会落在一台机器上)
    #http://10.0.0.4/upstream?id_100.html
    upstream swoole_server3 {
       #商品id 从url中匹配获取id
       hash $key;
       server 10.0.0.4:9091;
       server 10.0.0.4:9092;
    }

    #失败重试
    upstream swoole_server4 {
       server 10.0.0.4:9091;
       #max_fails最多重试次数，fail_timeout失败后多长时间再重新访问
       server 10.0.0.4:9092  max_fails=1 fail_timeout=30s ;
       #备用服务器(当所有服务都不能链接时回到 backup配置服务器上)
       server 10.0.0.1:80 backup;
    }


    upstream swoole_server1000 {
           #hash $key; #商品id
           server 10.0.0.4:9091  ; #weight=10
           server 10.0.0.4:9092  max_fails=1 fail_timeout=30s ;
           server 220.181.38.148:80 backup;

    }

    #7结束

    #############11
    #URI当中存在了cache返回1,0缓存，1不缓存
    map $request_uri  $no_cache {
        default  0;
        ~*/nocache 1;
    }

    #############11


    #如果不在白名单之内,返回客户端的二进制的ip地址
    #匹配$whiteIpList赋值给$limit
    map $whiteIpList  $limit {
        default  "";
        1   $binary_remote_addr;
        0   "";
    }

    #如果返回的是空字符串那么速率限制会失效
    limit_req_zone $limit zone=test:1m rate=1r/s;
    #4结束

    server {

        listen       80;
        server_name  localhost;

        #8##############
        gzip On;
        gzip_comp_level 1;#默认1（1-9），一般最高设置6就可以
        #8##############

        #charset koi8-r;
        #access_log  logs/host.access.log  main;

        #7start
        #从url中匹配id
        if ( $request_uri ~* ^\/.*id_(\d+).* ) {
           #赋值
           set $key $1;
        }

        #处理php
        location ~ .*\.php?$ {
            root           /var/www/html;
            default_type text/html;
            autoindex on;
            fastcgi_pass   192.168.5.30:9000;
            fastcgi_index  index.php;
            fastcgi_split_path_info  ^((?U).+\.php)(/?.+)$;
            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            fastcgi_param  PATH_INFO  $fastcgi_path_info;
            fastcgi_param  PATH_TRANSLATED  $document_root$fastcgi_path_info;
            include        fastcgi_params;
        }


        ##########13
        #关闭代码缓存
        #lua_code_cache off;
        set $testVar "lua set value";
        location /lua {
            default_type text/html;
            #脚本嵌套方式
            #content_by_lua '
            #    ngx.header.content_type="text/plain";
            #    ngx.say (ngx.var.testVar);
            #';

            #请求阶段，文件载入方式
            #access_by_lua_file /sftpdir/www/luash/1.lua;
            #内容处理阶段，文件载入方式
            #content_by_lua_file /sftpdir/www/luash/1.lua;

        }
        location @client1 {
             proxy_pass http://client1;
        }

        location @client2 {
           proxy_pass http://client2;
        }
        ##########13


        #负载均衡
        location /upstream {
            #11
            #default_type text/html;
            proxy_cache_bypass $no_cache;
            #return 200 $no_cache;
            #11
            #10
            proxy_http_version 1.1 ; #http协议版本
            proxy_cache my_cache; #启用缓存
            proxy_cache_valid any  1m; #设置哪些请求会缓存
            proxy_cache_key $scheme$proxy_host$uri$is_args$args; # 设置缓存的key
            proxy_cache_min_uses 1; #最小访问几次才会缓存
            proxy_cache_lock on; #如果说并发情况下,只会有一个请求落到后端服务器
            proxy_cache_methods GET HEAD POST;#那种类型的请求缓存
            #10

            #重写header打印真实的ip和端口
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $host:$proxy_port;
            #忽略服务器缓存的要求
            proxy_ignore_headers Cache-Control;
            #针对静态文件设置缓存设置
            #expires 30m;
            proxy_next_upstream timeout;
            #重试次数
            proxy_next_upstream_tries 5;
            #重试的超时时间
            proxy_next_upstream_timeout 10;
            proxy_send_timeout 10;
            proxy_read_timeout 10;
            proxy_connect_timeout 10;
            proxy_pass http://swoole_server;
        }

        #7stop


        #6 开始防盗链 http://10.0.0.4/1.jpg
         location ~* \.(gif|jpeg|png|jpg)$ {
            root /sftpdir/www;
            valid_referers 10.0.0.1  *.23673.com;
            if ( $invalid_referer ) {
                #定向到某个网站上
                rewrite  ^/   http://www.baidu.com/404.jpg break;
                #return 403 "$request_filename";
            }
         }
        #6 结束


        #5开始 http://10.0.0.4/m/1234563
        #http://10.0.0.4/api?id=1 -> http://118.24.109.254/api/public/index.php/test/peter
        location /m {
            autoindex on;
            root   '/sftpdir/www/api';

            #隐藏了路径 url中不会显示
            #rewrite ^/m/(.*)$ /1/2/3/4/index.html?id=$1 last;
            rewrite ^/m/(.*)$  /1/2/3/4/index.html?id=$1 break;
            #重定向跳转
            #rewrite ^/m/good-(\d+)\.html$  http://www.baidu.com/index.html?id=$1 permanent;
        }
        #5结束

        location / {
            default_type text/html;
            autoindex on;
            root   /var/www/html;
            index  index.html index.htm;

            #4、ip黑白名单
            #limit_req zone=test;
            #if ($http_user_agent ~* (mobile|nokia|iphone|ipad|android|samsung|htc|blackberry)) {
            #      rewrite ^(.*) http://nginx.localhost.com$1 permanent;
            # }

            #############
            #1、额外的多5次请求
            #limit_req zone=test burst=5;
            #1、不延迟处理
            #limit_req zone=test burst=5 nodelay;
            ###########2、打印
            #return 200 '111';
            #return 200 '$remote_addr';
            #打印客户端ip地址
            #return 200 '$remote_addr';
            ###########3允许iplua
            #allow 10.0.0.1;
            #拒绝网段
            #deny  10.0.0.0/24;
            #deny all;
            #error_page 403  500 502 503 504  50x.html;

        }

        location =/test {
            return 200 $remote_addr;
        }

        location ~* \.(txt|log|sql){
           deny all;
        }

        #配置静态文件绝对路径
        location ~* \.(jpg|png|jpeg){
            root /sftpdir/www/images;
            #图片防盗链
        }

        location /test {
            default_type text/html;
            return 200 test2;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
    include sites-enabled/*.conf;
}